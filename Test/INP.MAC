; Decimal/Octal value input
;
	.TITLE  INP
	.MCALL  .PRINT, OCTDIS

	CARRET  = 15
	BUFSIZ  = 80.
;
;
; Read ASCII string, address is in R0
;
INPSTR: MOV	R1, -(SP)
	MOV	R2, -(SP)
	MOV	#BUF, R1
	MOV	#BUF, R2
	ADD	#80., R2
1$:	EMT	340
	BCS	1$
	CMPB	R0, #CARRET
	BEQ	2$
	CMP	R1, R2
	BEQ	3$
	MOVB    R0, (R1)+
	BR	 1$
2$:	EMT	340
3$:	CLRB    (R1)
	MOV	#BUF, R0
	MOV	(SP)+, R2
	MOV	(SP)+, R1
	RTS	PC
;
; ASCII Octal to binary.
; Input string address is in R0, output value is in R0
; In case of an error - Carry bit is set
;
INOCT::	MOV	R1, -(SP)
	MOV	R2, -(SP)
	JSR	PC, INPSTR
O2B050:	CMPB	(R0)+, #'0	; Leading 0,
	BEQ	O2B050		; skip it
	DEC	R0		; Restore string address
	CLR	R2		; Initial value
O2B100:	MOVB	(R0)+, R1	; Get ASCII byte
	BEQ	O2B300		; Finish if End-Of-String
	SUB	#'0, R1		; Convert to binary
	CMP	R1, #7		; Is octal?
	BHI	O2B150		; No - error
	ASL	R2		; Mult. by 2
	BCS	O2B200		; If overflow - error
	ASL	R2		; Mult. by 2
	BCS	O2B200		; If overflow - error
	ASL	R2		; Mult. by 2
	BCS	O2B200		; If overflow - error
	BIS	R1, R2		; Set new 3 bits
	BR	O2B100		; Loop
; Error output
O2B150:	MOV	#2, R1		; Pointer to error message
	BR	O2B250		; Goto print
O2B200:	CLR	R1		; Pointer to error message
O2B250:	MOV	#O2BERR, R0	; Header message address
	EMT	351		; Print
	MOV	O2BERM(R1), R0  ; Error message address
	EMT	351		; Print
	SEC			; Set error flag
	BR	O2B300+4	; Return
; Normal return
O2B300:	CLC			; Clear error flag
	MOV	R2, R0		; Put value to R0
	MOV	(SP)+, R2	;
	MOV	(SP)+, R1	;
	RTS	PC		; Return
;
; Decimal to binary convertion
; Input string address is in R0, output value is in R0
; In case of an error - Carry bit is set
;
INDEC::	CLRB	D2B800
	.IRP	X,<1,2,3,4,5>
	MOV	R'X, -(SP)
	.ENDM
	JSR	PC, INPSTR
	CLR	R4
	CLR	R1
	CLR	R2
	JSR	PC, SEOS
;
	CMPB    (R0), #'-	; Negative?
	BNE	D2B100
	INC	R0
	BR	D2B200
D2B100:	INCB	D2B800
	CMPB	(R0), #'+
	BNE	D2B200
	INC	R0
D2B200:	CMPB	(R0)+, #'0
	BEQ	D2B200
	DEC	R0
D2B240:	CMP	R0, R3
	BEQ	D2B780
	MOVB	-(R3), R5	; Get digit
	SUB	#'0, R5		; Convert to binary
	BEQ	D2B260+2
	BLT	D2B770		; Negative - error
	CMP	R5, #9.		; Is decimal?
	BHI	D2B770		; No - error
	MOV	R1, -(SP)
	BEQ	D2B260
D2B245:	ASL	R5
	BMI	D2B250+2	; Overflow error
	MOV	R5, -(SP)
	ASL	R5
	BMI	D2B250		; Overflow - error
	ASL	R5
	BPL	D2B255		; Everything is good
D2B250:	TST	(SP)+		; Overflow error
	TST	(SP)+		; process here
	ADD	#2, R2		; Set error message
	BR	 D2B770		; Print error message
D2B255:	ADD	(SP)+, R5	; Mult. by 10.
	BVS	D2B250+2	; Overflow - error
	DEC	R1
	BNE	D2B245
;
D2B260:	MOV	(SP)+, R1
	INC	R1
	ADD	R5, R4
	BVC	D2B240
	CMP	R4, #100000
	BNE	D2B760		; Error
	TSTB	D2B800
	BEQ	D2B240
;
D2B760:	MOV	#4, R2		 ; Set error message
D2B770:	MOV	#D2BERR, R0	; Header message address
	EMT	351		; Print header message
	MOV	D2BERM(R2), R0  ; Error message address
	EMT	351		; Print error message
	SEC			; Set error flag
	BR	D2B820		; Return
D2B780:	MOV	R4, R0		; Final result to R0
D2B800:	BR	 .+2		; If necessary -
	NEG	R0		; - change sign
	CLC			; Clear error flag
D2B820:	MOV	(SP)+, R5
	.IRP	X,<4,3,2,1>
	MOV	(SP)+, R'X
	.ENDM
	RTS	PC
;
; Find End-of-string, result is in R3
;
SEOS:	MOV	#BUF, R3
	MOV	R1, -(SP)
SEOSL:	MOVB	(R3), R1
	BEQ	SEOSE
	CMP	R3, #BUF+80.
	BEQ	SEOSE
	INC	R3
	BR	SEOSL
;
SEOSE:	MOV	(SP)+, R1
	RTS	PC
;
BUF:	.BLKB	BUFSIZ+2
;
; Octal-to-bin error messages link
O2BERM:	.WORD	O2BER1
	.WORD	O2BER2
;
; Decimal-to-bin error mesages link
D2BERM:	.WORD	D2BER1
	.WORD	D2BER2
	.WORD	D2BER3
;
; Octal-to-bin error messages
O2BERR:	.ASCII	/!!! O2B convertion error: /<200>
O2BER1:	.ASCII	/too many digits !!!/<0>
O2BER2:	.ASCII	/not octal value !!!/<0>
;
; Decimal-to-binary error messages
D2BERR:	.ASCII/!!! D2B convertion error: /<200>
D2BER1:	.ASCII	/not deciamal value !!!/<0>
D2BER2:	.ASCII	/overflow !!!/<0>
D2BER3:	.ASCII	/negation/<0>
	.EVEN
	.END
